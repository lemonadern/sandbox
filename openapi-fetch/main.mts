import createClient from "openapi-fetch";
import type { paths } from "./generated-types.d.ts"; // generated by openapi-typescript

const client = createClient<paths>({ baseUrl: "http://localhost:8000" });

// const { data, error } = await client.POST("/upload", {
//   body: {
//     name: "",
//     query: "typescript",
//   },
//   bodySerializer(body) {
//     const fd = new FormData();
//     for (const name in body) {
//       const value = body[name as keyof typeof body];
//       if (typeof value === "object") {
//         fd.append(name, JSON.stringify(value));
//       } else {
//         fd.append(name, value);
//       }
//     }
//     return fd;
//   },
// });
//   bodySerializer: (body) => {
//     const fd = new FormData();
//     for (const name in body) {
//       let value = body[name as keyof typeof body];
//       if (typeof value === 'object' && value !== null && !(value instanceof File) && !(value instanceof Blob)) {
//         value = JSON.stringify(value);
//       }
//       fd.append(name, value);
//     }
//     return fd;
//   },

const { data, error } = await client.POST("/upload", {
  body: {
    name: "",
    query: {
      version: 1,
    },
  },

  bodySerializer: (body) => {
    const fd = new FormData();

    const appendFormData = (fd: FormData, data: unknown, parentKey = "") => {
      if (
        data && typeof data === "object" && !Array.isArray(data) &&
        !(data instanceof File) && !(data instanceof Blob)
      ) {
        for (const key in data) {
          appendFormData(
            fd,
            data[key as keyof typeof data],
            parentKey ? `${parentKey}.${key}` : key,
          );
        }
      } else if (Array.isArray(data)) {
        for (const e of data) {
          appendFormData(fd, e, parentKey);
        }
      } else {
        fd.append(parentKey, data as string | Blob | File);
      }
    };

    appendFormData(fd, body);

    return fd;
  },
});

console.log(data, error);
